# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensures this job runs after the build job

    steps:
      # Step 1: Checkout the code from the repository (again, in case it's needed here)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install SSH client
      - name: Install SSH client
        run: sudo apt-get install -y ssh

      # Step 3: Add EC2 private SSH key to authenticate with EC2 instance
      - name: Add EC2 SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > github_actions.pem
          chmod 600 github_actions.pem

      # Step 4: SSH into EC2 and deploy the Python app
      - name: Deploy to EC2
        run: |
            ssh -i github_actions.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
              # Update system packages and install necessary tools
              sudo apt update && sudo apt install -y python3 python3-pip python3-venv git

              # Navigate to /home/ubuntu and ensure the repo is cloned
              cd /home/ubuntu || exit 1

              # If the python-app directory doesn't exist, clone the repo
              if [ ! -d "python-app" ]; then
                git clone https://github.com/SP4400/python-app.git
              fi
              cd python-app

              # Create a virtual environment for the project
              python3 -m venv venv

              # Activate the virtual environment
              source venv/bin/activate

              # Install dependencies in the virtual environment
              pip install -r requirements.txt

              # Stop any running instance of the app
              pkill -f src/main.py || true

              # Run the app from the src folder in the background and log output
              nohup python3 src/main.py > output.log 2>&1 &

              exit
            EOF
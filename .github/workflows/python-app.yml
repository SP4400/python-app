# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensures this job runs after the build job

    steps:
      # Step 1: Checkout the code from the repository (again, in case it's needed here)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install SSH client
      - name: Install SSH client
        run: sudo apt-get install -y ssh

      # Step 3: Add EC2 private SSH key to authenticate with EC2 instance
      - name: Add EC2 SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > github_actions.pem
          chmod 600 github_actions.pem

      # Step 4: SSH into EC2 and deploy the Python app
      - name: Deploy to EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to your Python app directory
            cd /home/ubuntu

            # Pull the latest changes from the repository (if using Git)
            git pull origin main

            # Install dependencies from requirements.txt
            pip install -r requirements.txt

            # Restart the app (adjust this based on how you're running the app)
            sudo systemctl restart your-python-app.service

            # Alternatively, if not using systemd, you can run the app manually
            # nohup python3 app.py &

            exit
          EOF
